/*
 * Copyright (c) 2015-2020, Virgil Security, Inc.
 *
 * Lead Maintainer: Virgil Security Inc. <support@virgilsecurity.com>
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 *     (1) Redistributions of source code must retain the above copyright notice, this
 *     list of conditions and the following disclaimer.
 *
 *     (2) Redistributions in binary form must reproduce the above copyright notice,
 *     this list of conditions and the following disclaimer in the documentation
 *     and/or other materials provided with the distribution.
 *
 *     (3) Neither the name of virgil nor the names of its
 *     contributors may be used to endorse or promote products derived from
 *     this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

static def getEnvironmentValue(String name) {
    if (System.getenv(name) != null) {
        def value = System.getenv(name)
        return "\"$value\""
    } else if (System.getProperty(name) != null) {
        def value = System.getProperty(name)
        return "\"$value\""
    } else {
        System.out.println("Please, provide argument: " + name)
    }
}

def APP_ID = hasProperty('APP_ID') ? "\"${project.property("APP_ID")}\"" : getEnvironmentValue('APP_ID')
def API_PRIVATE_KEY = hasProperty('API_PRIVATE_KEY') ? "\"${project.property("API_PRIVATE_KEY")}\"" : getEnvironmentValue('API_PRIVATE_KEY')
def API_PUBLIC_KEY_ID = hasProperty('API_PUBLIC_KEY_ID') ? "\"${project.property("API_PUBLIC_KEY_ID")}\"" : getEnvironmentValue('API_PUBLIC_KEY_ID')
def SERVICE_URL = hasProperty('SERVICE_URL') ? "\"${project.property("SERVICE_URL")}\"" : getEnvironmentValue('SERVICE_URL')

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.virgilsecurity.ratchet_android_tests"
        minSdkVersion 21
        targetSdkVersion 28
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        buildTypes.each {
            it.buildConfigField "String", "APP_ID", "$APP_ID"
            it.buildConfigField "String", "API_PRIVATE_KEY", "$API_PRIVATE_KEY"
            it.buildConfigField "String", "API_PUBLIC_KEY_ID", "$API_PUBLIC_KEY_ID"
            it.buildConfigField "String", "SERVICE_URL", "$SERVICE_URL"
        }
    }
}

dependencies {
    // Internal
    androidTestImplementation project(':ratchet-android')

    // Kotlin
    androidTestImplementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$versions.kotlinVersion"
    implementation "com.android.support:appcompat-v7:$versions.compatLibs"

    // Test
    testImplementation "junit:junit:$versions.junitOld"
    androidTestImplementation "com.android.support.test:runner:$versions.testsRunner"
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$versions.espresso"

    androidTestImplementation "com.virgilsecurity:test-common:$versions.virgilTestCommon"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    dependsOn(copyEnvFile)
}

task copyEnvFile(type: Copy) {
    def assetsFolder = new File(project.projectDir.absolutePath + '/src/androidTest/resources/testProperties')
    if (!assetsFolder.exists()) assetsFolder.mkdirs()

    from rootProject.projectDir.absolutePath + '/env.json'
    into assetsFolder.absolutePath
}
